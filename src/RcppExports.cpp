// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// udunits_init
void udunits_init(CharacterVector path);
RcppExport SEXP _units_udunits_init(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type path(pathSEXP);
    udunits_init(path);
    return R_NilValue;
END_RCPP
}
// udunits_exit
void udunits_exit();
RcppExport SEXP _units_udunits_exit() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    udunits_exit();
    return R_NilValue;
END_RCPP
}
// R_ut_is_parseable
bool R_ut_is_parseable(CharacterVector a);
RcppExport SEXP _units_R_ut_is_parseable(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_is_parseable(a));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_are_convertible
bool R_ut_are_convertible(CharacterVector a, CharacterVector b);
RcppExport SEXP _units_R_ut_are_convertible(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_are_convertible(a, b));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_convert_doubles
NumericVector R_ut_convert_doubles(CharacterVector from, CharacterVector to, NumericVector val);
RcppExport SEXP _units_R_ut_convert_doubles(SEXP fromSEXP, SEXP toSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_convert_doubles(from, to, val));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_new_dimensionless_unit
void R_ut_new_dimensionless_unit(CharacterVector name);
RcppExport SEXP _units_R_ut_new_dimensionless_unit(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type name(nameSEXP);
    R_ut_new_dimensionless_unit(name);
    return R_NilValue;
END_RCPP
}
// R_ut_scale
void R_ut_scale(CharacterVector nw, CharacterVector old, NumericVector d);
RcppExport SEXP _units_R_ut_scale(SEXP nwSEXP, SEXP oldSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type old(oldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    R_ut_scale(nw, old, d);
    return R_NilValue;
END_RCPP
}
// R_ut_offset
void R_ut_offset(CharacterVector nw, CharacterVector old, NumericVector d);
RcppExport SEXP _units_R_ut_offset(SEXP nwSEXP, SEXP oldSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type old(oldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    R_ut_offset(nw, old, d);
    return R_NilValue;
END_RCPP
}
// R_ut_set_encoding
void R_ut_set_encoding(std::string enc_str);
RcppExport SEXP _units_R_ut_set_encoding(SEXP enc_strSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type enc_str(enc_strSEXP);
    R_ut_set_encoding(enc_str);
    return R_NilValue;
END_RCPP
}
// R_ut_get_symbol
CharacterVector R_ut_get_symbol(CharacterVector ustr);
RcppExport SEXP _units_R_ut_get_symbol(SEXP ustrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ustr(ustrSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_get_symbol(ustr));
    return rcpp_result_gen;
END_RCPP
}
// R_ut_get_name
CharacterVector R_ut_get_name(CharacterVector ustr);
RcppExport SEXP _units_R_ut_get_name(SEXP ustrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ustr(ustrSEXP);
    rcpp_result_gen = Rcpp::wrap(R_ut_get_name(ustr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_units_udunits_init", (DL_FUNC) &_units_udunits_init, 1},
    {"_units_udunits_exit", (DL_FUNC) &_units_udunits_exit, 0},
    {"_units_R_ut_is_parseable", (DL_FUNC) &_units_R_ut_is_parseable, 1},
    {"_units_R_ut_are_convertible", (DL_FUNC) &_units_R_ut_are_convertible, 2},
    {"_units_R_ut_convert_doubles", (DL_FUNC) &_units_R_ut_convert_doubles, 3},
    {"_units_R_ut_new_dimensionless_unit", (DL_FUNC) &_units_R_ut_new_dimensionless_unit, 1},
    {"_units_R_ut_scale", (DL_FUNC) &_units_R_ut_scale, 3},
    {"_units_R_ut_offset", (DL_FUNC) &_units_R_ut_offset, 3},
    {"_units_R_ut_set_encoding", (DL_FUNC) &_units_R_ut_set_encoding, 1},
    {"_units_R_ut_get_symbol", (DL_FUNC) &_units_R_ut_get_symbol, 1},
    {"_units_R_ut_get_name", (DL_FUNC) &_units_R_ut_get_name, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_units(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
