[{"path":"/articles/measurement_units_in_R.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Measurement units in R","text":"briefly review SI units, discuss R packages deal measurement units, compatibility conversion. Built upon UNIDATA udunits library, introduce package units provides class maintaining unit metadata. used expression, automatically converts units, simplifies units results possible; case incompatible units, errors raised. class flexibly allows expansion beyond predefined units. Using units may eliminate whole class potential scientific programming mistakes. discuss potential limitations computing explicit units.","code":""},{"path":"/articles/measurement_units_in_R.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Measurement units in R","text":"Two quotes Cobb Moore (1997) – Data just numbers, numbers context data analysis, context provides meaning – illustrate data analysis meaningful, knowledge data’s context needed. Pragmatic aspects context include collected generated data, done, purpose (Scheider et al. 2016); semantic aspects concern data represents: aspect world data refer , measured, value 1 means. R allow keeping context data, instance data.frame columns must list elements may names can used describe context, using freetext matrix array objects may dimnames variables class factor ordered, levels may indicate, using freetext, categories nominal ordinal variables POSIXt Date objects specify numbers interpreted time date, fixed units (second day, respectively) origin (Jan 1, 1970, 00:00 UTC) difftime objects specify time duration can represented numbers, flexible units (secs, mins, hours, days, weeks); lubridate (Grolemund Wickham 2011) extends functionality. Furthermore, spatial objects defined package sp (Pebesma Bivand 2005) proper coordinate reference system set, can transformed datums, converted various flat (projected) representations Earth (Iliffe Lott 2008). many cases however, R drops contextual information. example, look annual global land-ocean temperature index (http://climate.nasa.gov/vital-signs/global-temperature/) since 1960: , time difference units reported difftime object year_duration, use linear algebra operation unit dropped. Similarly, linear regression coefficients see unit change degrees Celsius either per day (date) per second (time). purely mathematical manipulations, R often strips context numbers carried attributes, linear algebra routines prime example. variables somehow attributed information units, specify value 1 variable represents. may counts something, e.g. 1 apple, may also refer physical unit, distance meter. article discusses strong unit support can introduced R.","code":"temp_data = subset(read.table(\"647_Global_Temperature_Data_File.txt\",      header=TRUE)[1:2], Year >= 1960) temp_data$date = as.Date(paste0(temp_data$Year, \"-01-01\")) temp_data$time = as.POSIXct(temp_data$date) Sys.setenv(TZ=\"UTC\") head(temp_data, 3) ##    Year Annual_Mean       date       time ## 81 1960       -0.03 1960-01-01 1960-01-01 ## 82 1961        0.05 1961-01-01 1961-01-01 ## 83 1962        0.02 1962-01-01 1962-01-01 year_duration = diff(temp_data$date) mean(year_duration) ## Time difference of 365.2545 days year_duration %*% rep(1, length(year_duration)) / length(year_duration) ##          [,1] ## [1,] 365.2545 coef(lm(Annual_Mean ~ date, temp_data)) ##  (Intercept)         date  ## 1.833671e-02 4.364763e-05 coef(lm(Annual_Mean ~ time, temp_data)) ##  (Intercept)         time  ## 1.833671e-02 5.051809e-10"},{"path":"/articles/measurement_units_in_R.html","id":"si","dir":"Articles","previous_headings":"","what":"SI","title":"Measurement units in R","text":"BIPM (Bureau International des Poids et Mesures) “intergovernmental organization Member States act together matters related measurement science measurement standards. recommended practical system units measurement International System Units (Système International d’Unités, international abbreviation SI) (https://www.bipm.org/en/measurement-units/)”. International Bureau Weights Measures, Taylor, Thompson (2001) describe SI units, , briefly, SI units consist seven base units (length, mass, time & duration, electric current, thermodynamic temperature, amount substance, luminous intensity), name abbreviation (see table ) consist derived units formed products powers base units, m/s2^2, many special names symbols (e.g. angle: 1 rad = 1 m/m; force: 1 N = 1 m kg s−2^{-2}) consist coherent derived units derived units include numerical factors one (exception kg; base unit, kg can part coherent derived units); example coherent derived unit 1 watt = 1 joule per 1 second, may contain SI prefixes (k = kilo 10310^3, m = milli 10−310^{-3}, etc.) contain special quantities units disappear (e.g., m/m) nature count, cases unit 1. base quantities, SI units symbols (International Bureau Weights Measures, Taylor, Thompson (2001), p. 23):","code":""},{"path":"/articles/measurement_units_in_R.html","id":"related-work-in-r","dir":"Articles","previous_headings":"","what":"Related work in R","title":"Measurement units in R","text":"Several R packages provide unit conversions. instance, measurements (Birk 2016) provides collection tools make working physical measurements easier. converts metric imperial units, calculates dimension’s unknown value dimensions’ measurements. conv_unit function: uses instance kph instead km_per_hour, m3_per_hr flow – unit names seem come convention rather systematic composition. Object conv_unit_options contains 173 supported units, categorized physical dimension describe: Function conv_dim allows conversion units products ratios, e.g. computes many minutes takes travel 100 meters 3 feet per second. Package NISTunits (Gama 2014) provides fundamental physical constants (Quantity, Value, Uncertainty, Unit) SI non-SI units, plus unit conversions, based data NIST (National Institute Standards Technology). package provides single function every unit conversion; 5 896 functions form NISTxxxTOyyy xxx yyy refer two different units. instance, converting W m−2^{-2} W inch−2^{-2} done measurements NISTunits written entirely R.","code":"library(measurements) conv_unit(2.54, \"cm\", \"inch\") ## [1] 1 conv_unit(c(\"101 44.32\",\"3 19.453\"), \"deg_dec_min\", \"deg_min_sec\") ## [1] \"101 44 19.2000000000116\" \"3 19 27.1800000000003\" conv_unit(10, \"cm_per_sec\", \"km_per_day\") ## [1] 8.64 names(conv_unit_options) ##  [1] \"acceleration\" \"angle\"        \"area\"         \"coordinate\"   \"count\"        ##  [6] \"duration\"     \"energy\"       \"file_size\"    \"flow\"         \"length\"       ## [11] \"mass\"         \"power\"        \"pressure\"     \"speed\"        \"temperature\"  ## [16] \"torque\"       \"volume\" conv_unit_options$volume ##  [1] \"ul\"        \"uL\"        \"ml\"        \"mL\"        \"dl\"        \"dL\"        ##  [7] \"l\"         \"L\"         \"cm3\"       \"dm3\"       \"m3\"        \"km3\"       ## [13] \"us_tsp\"    \"us_tbsp\"   \"us_oz\"     \"us_cup\"    \"us_pint\"   \"us_quart\"  ## [19] \"us_gal\"    \"inch3\"     \"in3\"       \"ft3\"       \"mi3\"       \"imp_tsp\"   ## [25] \"imp_tbsp\"  \"imp_oz\"    \"imp_cup\"   \"imp_pint\"  \"imp_quart\" \"imp_gal\" conv_dim(x = 100, x_unit = \"m\", trans = 3, trans_unit = \"ft_per_sec\", y_unit = \"min\") ## [1] 1.822689 library(NISTunits) NISTwattPerSqrMeterTOwattPerSqrInch(1:5) ## [1] 0.00064516 0.00129032 0.00193548 0.00258064 0.00322580"},{"path":"/articles/measurement_units_in_R.html","id":"unidatas-udunits-library","dir":"Articles","previous_headings":"","what":"UNIDATA’s udunits library","title":"Measurement units in R","text":"Udunits, developed UCAR/UNIDATA, advertises web page : “udunits package supports units physical quantities. C library provides arithmetic manipulation units conversion numeric values compatible units. package contains extensive unit database, XML format user-extendable.” Unlike measurements NISTunits, underlying udunits2 C library parses units expressions, bases logic upon convertibility expressions, rather comparison fixed strings: advantage complex computations, intermediate objects can units arbitrarily complex, can potentially simplified later . also means package practically supports unlimited amount derived units.","code":"m100_a = paste(rep(\"m\", 100), collapse = \"*\") dm100_b = \"dm^100\" units::ud_are_convertible(m100_a, dm100_b) ## [1] TRUE"},{"path":"/articles/measurement_units_in_R.html","id":"udunits-versus-the-unified-code-for-units-of-measure-ucum","dir":"Articles","previous_headings":"","what":"Udunits versus the Unified Code for Units of Measure (UCUM)","title":"Measurement units in R","text":"Another set encodings measurement units Unified Code Units Measure (UCUM, Schadow McDonald (2009)). dedicated web site describes details differences udunits UCUM, provides conversion service two encoding sets. UCUM website refers Java implementations, links seem dead. UCUM preferred encoding standards Open Geospatial Consortium. udunits hand units standard choice climate science community, adopted CF (Climate Forecast) conventions, mostly uses NetCDF. NetCDF (Rew Davis 1990) binary data format widely used atmospheric climate model predictions. udunits library C library strong support UNIDATA, decided build developments , rather Java implementations UCUM less clear provenance.","code":""},{"path":"/articles/measurement_units_in_R.html","id":"handling-data-with-units-in-r-the-units-package","dir":"Articles","previous_headings":"","what":"Handling data with units in R: the units package","title":"Measurement units in R","text":"units package builds units objects scratch, e.g. represents speed values m/s. units m s resolved udunits2 C library (user-defined units). Units can used arbitrary R expressions like Several manipulations units objects now illustrated. Manipulations involve unit conversion instance addition: Explicit unit conversion done assigning new units: similar behaviour difftime objects, modifies numeric values without modifying meaning (numbers refer ). mixing units sums, comparisons concatenation, units automatically converted first argument: c(y, x) concatenates y x converting x units y. Derived units created appropriate: meaningful error messages appear units compatible: full set methods method groups units objects shown method groups Ops include operations require compatible units, converting necessary (+, -, ==, !=, <, >, <=, >=), operations create new units (*, /, ^ **), Math include abs, sign, floor, ceiling, trunc, round, signif, log, cumsum, cummax, cummin, Summary include sum, min, max range, convert unit first argument. possible, new units simplified: Units printed simple R expressions, e.g. Another way print units commonly seen Climate Forecast Conventions m2 s-1 m2^2/s. R expressions, can parsed as_units, created deparse_unit: plot hist methods add units default axis labels, example shown following figures. ggplot2 plots (Wickham 2009), automatic unit placement default axis label also provided; demo(ggplot2) gives example.   Automatic conversion units difftime provided: well POSIXct Date: Objects class units can used columns data.frame objects, well tbl_df (Wickham, Francois, Müller 2016). can also matrix array, constraint single unit holds elements.","code":"library(units) ## udunits database from /usr/share/xml/udunits/udunits2.xml x = set_units(1:5, m/s) str(x) ##  Units: [m/s] num [1:5] 1 2 3 4 5 set_units(1:3, m/s^2) ## Units: [m/s^2] ## [1] 1 2 3 x = set_units(1:3, m/s) x + 2 * x ## Units: [m/s] ## [1] 3 6 9 (x = set_units(x, cm/s)) ## Units: [cm/s] ## [1] 100 200 300 as.numeric(x) ## [1] 100 200 300 y = set_units(1:3, km/h) x + y ## Units: [cm/s] ## [1] 127.7778 255.5556 383.3333 y + x ## Units: [km/h] ## [1]  4.6  9.2 13.8 x == y ## [1] FALSE FALSE FALSE c(y, x) ## Units: [km/h] ## [1]  1.0  2.0  3.0  3.6  7.2 10.8 x * y ## Units: [cm*km/(h*s)] ## [1] 100 400 900 x^3 ## Units: [cm^3/s^3] ## [1] 1.0e+06 8.0e+06 2.7e+07 e = try(z <- x + x * y) ## Error : cannot convert cm*km/(h*s) into cm/s attr(e, \"condition\")[[1]] ## [1] \"cannot convert cm*km/(h*s) into cm/s\" methods(class = \"units\") ##  [1] [             [[            [[<-          [<-           all.equal     ##  [6] anyDuplicated as_units      as.data.frame as.Date       as.list       ## [11] as.POSIXct    boxplot       c             cbind         diff          ## [16] drop_units    duplicated    format        hist          log10         ## [21] log2          Math          matrixOps     mean          median        ## [26] mixed_units   Ops           plot          print         quantile      ## [31] rbind         rep           seq           set_units     str           ## [36] summary       Summary       unique        units         units<-       ## [41] weighted.mean ## see '?methods' for accessing help and source code a = set_units(1:10, m/s) b = set_units(1:10, h) a * b ## Units: [m] ##  [1]   3600  14400  32400  57600  90000 129600 176400 230400 291600 360000 ustr1 = paste(rep(\"m\", 101), collapse = \"*\") ustr2 = \"dm^100\" as_units(ustr1) / as_units(ustr2) ## 1e+100 [m] set_units(1, m^5/s^4) ## 1 [m^5/s^4] as_units(\"m2 s-1\") ## 1 [m^2/s] deparse_unit(set_units(1, m^2*s^-1)) ## [1] \"m2 s-1\" library(units) units_options(negative_power = TRUE) # initialize variables with units: mtcars$consumption = set_units(mtcars$mpg, mi/gallon) # \"in\" is also a reserved R keyword, and so needs back-quotes: mtcars$displacement = set_units(mtcars$disp, `in`^3) # convert to SI: mtcars$consumption = set_units(mtcars$consumption, km/l) mtcars$displacement = set_units(mtcars$displacement, cm^3) par(mar = par(\"mar\") + c(0, .3, 0, 0)) with(mtcars, plot(1/displacement, 1/consumption)) library(ggplot2) ggplot(mtcars) + geom_point(aes(x = 1/displacement, y = 1/consumption)) (dt = diff(Sys.time() + c(0, 1, 1+60, 1+60+3600))) # class difftime ## Time differences in secs ## [1]    1   60 3600 (dt.u = as_units(dt)) ## Units: [s] ## [1]    1   60 3600 identical(as_difftime(dt.u), dt) ## [1] TRUE (t1 <- as_units(as.POSIXct(\"2017-08-20 17:03:00\"))) ## 1503248580 [seconds since 1970-01-01 00:00:00 +00:00] (t2 <- as_units(as.POSIXct(\"2017-08-20 17:03:00\"), \"hours since 2017-08-20\")) ## 17.05 [hours since 2017-08-20] (d1 <- as_units(as.Date(\"2017-08-20\"))) ## 17398 [days since 1970-01-01] as.POSIXct(t1) ## [1] \"2017-08-20 17:03:00 UTC\" as.Date(d1) ## [1] \"2017-08-20\""},{"path":"/articles/measurement_units_in_R.html","id":"discussion-and-conclusions","dir":"Articles","previous_headings":"","what":"Discussion and conclusions","title":"Measurement units in R","text":"units R package provides new class, units, numeric data associated measurement units. Operations objects class retain unit metadata provide automated dimensional analysis: dimensions taken consideration computations comparisons. Combining different units compatible triggers automatic unit conversion, derived units automatically generated simplified possible, meaningful error messages given user tries add objects incompatible units. verifies computations syntactically numerically allowed, also semantically, case physical units, physically allowed, may support code verification provenance tracking. Using package may eliminate whole class potential scientific programming mistakes. R packages measurements NISTunits provide conversion fixed number units, help udunits2 C library unit database, R package units handles arbitrarily complex derived units. treating units expressions can derive, convert simplify units. addition, beyond SI units packaged, units handles user-defined units. Data units vectors can stored columns data.frame tbl_df objects, can converted difftime. units objects associated time location information, stored spatial spatio-temporal objects provided sp spacetime (Pebesma 2012) store attribute data data.frame slots, instance zoo (Zeileis Grothendieck 2005) xts (Ryan Ulrich 2014) objects, latter two set class attribute vector matrix. Despite standardization efforts, units may still ambiguous, subject interpretation. instance duration one year NISTunits gives us answer depends whether want common, leap, Gregorian, Julian, tropical siderial year (Lang (2006), see also demo(year)). illustrates apply unit conversion aware possible pitfalls. Support calendars udunits seems well developed R. Future work includes extending packages read external data formats, databases interfaces support measurement unit information R, preserving measurement unit information. Examples interfaces HDF5 (e.g., h5, Annau (2016)), RNetCDF (Michna Woods 2016) sos4R (Nüst, Stasch, Pebesma 2011). nice see units measurements propagate units regression coefficient estimates.","code":""},{"path":"/articles/measurement_units_in_R.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Measurement units in R","text":"acknowledge three anonymous reviewers handling editor constructive comments, Thomas Lin Pedersen implementing ggplot extensions package ggforce (ported units package since v0.8-0) automatically add units default ggplot axis labels.","code":""},{"path":[]},{"path":"/articles/units.html","id":"setting-units-unit-conversion","dir":"Articles","previous_headings":"","what":"Setting units, unit conversion","title":"Units of Measurement for R Vectors: an Introduction","text":"can set units numerical values set_units: result, e.g.  literally means “10 times 1 m divided 1 s”. writing, “1” values omitted, multiplication implicit.","code":"library(units) ## udunits database from /usr/share/xml/udunits/udunits2.xml (a <- set_units(runif(10),  m/s)) ## Units: [m/s] ##  [1] 0.080750138 0.834333037 0.600760886 0.157208442 0.007399441 0.466393497 ##  [7] 0.497777389 0.289767245 0.732881987 0.772521511 set_units(10, m/s) ## 10 [m/s]"},{"path":"/articles/units.html","id":"unit-conversion","dir":"Articles","previous_headings":"Setting units, unit conversion","what":"Unit conversion","title":"Units of Measurement for R Vectors: an Introduction","text":"conversion meaningful, hours seconds meters kilometers, conversion can done explicitly setting units vector","code":"b = a units(b) <- make_units(km/h) b ## Units: [km/h] ##  [1] 0.29070050 3.00359893 2.16273919 0.56595039 0.02663799 1.67901659 ##  [7] 1.79199860 1.04316208 2.63837515 2.78107744"},{"path":[]},{"path":"/articles/units.html","id":"arithmetic-operations","dir":"Articles","previous_headings":"Basic manipulations","what":"Arithmetic operations","title":"Units of Measurement for R Vectors: an Introduction","text":"Arithmetic operations verify units, create new ones convert units first argument necessary: Currently, powers supported integer powers, using ** 2.5 result error.","code":"a + a ## Units: [m/s] ##  [1] 0.16150028 1.66866607 1.20152177 0.31441688 0.01479888 0.93278699 ##  [7] 0.99555478 0.57953449 1.46576397 1.54504302 a * a ## Units: [m^2/s^2] ##  [1] 6.520585e-03 6.961116e-01 3.609136e-01 2.471449e-02 5.475173e-05 ##  [6] 2.175229e-01 2.477823e-01 8.396506e-02 5.371160e-01 5.967895e-01 a ^ 2 ## Units: [m^2/s^2] ##  [1] 6.520585e-03 6.961116e-01 3.609136e-01 2.471449e-02 5.475173e-05 ##  [6] 2.175229e-01 2.477823e-01 8.396506e-02 5.371160e-01 5.967895e-01 a ** -2 ## Units: [s^2/m^2] ##  [1]   153.360480     1.436551     2.770746    40.462087 18264.262998 ##  [6]     4.597217     4.035800    11.909716     1.861795     1.675633 a + b # m/s + km/h -> m/s ## Units: [m/s] ##  [1] 0.16150028 1.66866607 1.20152177 0.31441688 0.01479888 0.93278699 ##  [7] 0.99555478 0.57953449 1.46576397 1.54504302"},{"path":"/articles/units.html","id":"unit-simplification","dir":"Articles","previous_headings":"Basic manipulations","what":"Unit simplification","title":"Units of Measurement for R Vectors: an Introduction","text":"basic simplification units: also work units need converted can simplified: Simplification unit-less values gives “1” unit: Allowed operations require convertible units +, -, ==, !=, <, >, <=, >=. Operations lead new units *, /, power operations ** ^.","code":"t <- make_units(s) a * t ## Units: [m] ##  [1] 0.080750138 0.834333037 0.600760886 0.157208442 0.007399441 0.466393497 ##  [7] 0.497777389 0.289767245 0.732881987 0.772521511 t <- make_units(min) a * t ## Units: [m] ##  [1]  4.8450083 50.0599822 36.0456532  9.4325065  0.4439665 27.9836098 ##  [7] 29.8666433 17.3860347 43.9729192 46.3512907 m <- make_units(m) a * t / m ## Units: [1] ##  [1]  4.8450083 50.0599822 36.0456532  9.4325065  0.4439665 27.9836098 ##  [7] 29.8666433 17.3860347 43.9729192 46.3512907"},{"path":"/articles/units.html","id":"mathematical-functions","dir":"Articles","previous_headings":"Basic manipulations","what":"Mathematical functions","title":"Units of Measurement for R Vectors: an Introduction","text":"Mathematical operations allowed : abs, sign, floor, ceiling, trunc, round, signif, log, cumsum, cummax, cummin.","code":"signif(a ** 2 / 3, 3) ## Units: [m^2/s^2] ##  [1] 2.17e-03 2.32e-01 1.20e-01 8.24e-03 1.83e-05 7.25e-02 8.26e-02 2.80e-02 ##  [9] 1.79e-01 1.99e-01 cumsum(a) ## Units: [m/s] ##  [1] 0.08075014 0.91508317 1.51584406 1.67305250 1.68045194 2.14684544 ##  [7] 2.64462283 2.93439007 3.66727206 4.43979357 log(a) # base defaults to exp(1) ## Units: [ln(re 1 m.s-1)] ##  [1] -2.5163956 -0.1811226 -0.5095583 -1.8501827 -4.9063508 -0.7627256 ##  [7] -0.6976023 -1.2386773 -0.3107706 -0.2580954 log(a, base = 10) ## Units: [lg(re 1 m.s-1)] ##  [1] -1.09285673 -0.07866056 -0.22129835 -0.80352414 -2.13080108 -0.33124751 ##  [7] -0.30296483 -0.53795071 -0.13496595 -0.11208942 log(a, base = 2) ## Units: [lb(re 1 m.s-1)] ##  [1] -3.6303915 -0.2613047 -0.7351372 -2.6692494 -7.0783680 -1.1003804 ##  [7] -1.0064274 -1.7870336 -0.4483472 -0.3723530"},{"path":"/articles/units.html","id":"summary-functions","dir":"Articles","previous_headings":"Basic manipulations","what":"Summary functions","title":"Units of Measurement for R Vectors: an Introduction","text":"Summary functions sum, min, max, range allowed:","code":"sum(a) ## 4.439794 [m/s] min(a) ## 0.007399441 [m/s] max(a) ## 0.834333 [m/s] range(a) ## Units: [m/s] ## [1] 0.007399441 0.834333037"},{"path":"/articles/units.html","id":"printing","dir":"Articles","previous_headings":"Basic manipulations","what":"Printing","title":"Units of Measurement for R Vectors: an Introduction","text":"Following difftime, printing behaves differently length-one vectors:","code":"a ## Units: [m/s] ##  [1] 0.080750138 0.834333037 0.600760886 0.157208442 0.007399441 0.466393497 ##  [7] 0.497777389 0.289767245 0.732881987 0.772521511 a[1] ## 0.08075014 [m/s]"},{"path":"/articles/units.html","id":"subsetting","dir":"Articles","previous_headings":"Basic manipulations","what":"Subsetting","title":"Units of Measurement for R Vectors: an Introduction","text":"usual subsetting rules work:","code":"a[2:5] ## Units: [m/s] ## [1] 0.834333037 0.600760886 0.157208442 0.007399441 a[-(1:9)] ## 0.7725215 [m/s]"},{"path":"/articles/units.html","id":"concatenation","dir":"Articles","previous_headings":"Basic manipulations","what":"Concatenation","title":"Units of Measurement for R Vectors: an Introduction","text":"concatenation converts units first argument, necessary:","code":"c(a,a) ## Units: [m/s] ##  [1] 0.080750138 0.834333037 0.600760886 0.157208442 0.007399441 0.466393497 ##  [7] 0.497777389 0.289767245 0.732881987 0.772521511 0.080750138 0.834333037 ## [13] 0.600760886 0.157208442 0.007399441 0.466393497 0.497777389 0.289767245 ## [19] 0.732881987 0.772521511 c(a,b) # m/s, km/h -> m/s ## Units: [m/s] ##  [1] 0.080750138 0.834333037 0.600760886 0.157208442 0.007399441 0.466393497 ##  [7] 0.497777389 0.289767245 0.732881987 0.772521511 0.080750138 0.834333037 ## [13] 0.600760886 0.157208442 0.007399441 0.466393497 0.497777389 0.289767245 ## [19] 0.732881987 0.772521511 c(b,a) # km/h, m/s -> km/h ## Units: [km/h] ##  [1] 0.29070050 3.00359893 2.16273919 0.56595039 0.02663799 1.67901659 ##  [7] 1.79199860 1.04316208 2.63837515 2.78107744 0.29070050 3.00359893 ## [13] 2.16273919 0.56595039 0.02663799 1.67901659 1.79199860 1.04316208 ## [19] 2.63837515 2.78107744"},{"path":"/articles/units.html","id":"conversion-tofrom-difftime","dir":"Articles","previous_headings":"","what":"Conversion to/from difftime","title":"Units of Measurement for R Vectors: an Introduction","text":"difftime units: vice versa:","code":"t1 = Sys.time()  t2 = t1 + 3600  d = t2 - t1 (du = as_units(d)) ## 1 [h] (dt = as_difftime(du)) ## Time difference of 1 hours class(dt) ## [1] \"difftime\""},{"path":"/articles/units.html","id":"units-in-matrix-objects","dir":"Articles","previous_headings":"","what":"units in matrix objects","title":"Units of Measurement for R Vectors: an Introduction","text":"strips units.","code":"set_units(matrix(1:4,2,2), m/s) ## Units: [m/s] ##      [,1] [,2] ## [1,]    1    3 ## [2,]    2    4 set_units(matrix(1:4,2,2), m/s * m/s) ## Units: [m^2/s^2] ##      [,1] [,2] ## [1,]    1    3 ## [2,]    2    4 set_units(matrix(1:4,2,2), m/s) %*% set_units(4:3, m/s) ## Units: [m^2/s^2] ##      [,1] ## [1,]   13 ## [2,]   20"},{"path":"/articles/units.html","id":"units-objects-in-data-frames","dir":"Articles","previous_headings":"","what":"units objects in data.frames","title":"Units of Measurement for R Vectors: an Introduction","text":"units data.frame objects printed, appear summary:.","code":"set.seed(131) d <- data.frame(x = runif(4),                      y = set_units(runif(4), s),                      z = set_units(1:4, m/s)) d ##           x             y       z ## 1 0.2064370 0.8463468 [s] 1 [m/s] ## 2 0.1249422 0.5292048 [s] 2 [m/s] ## 3 0.2932732 0.5186254 [s] 3 [m/s] ## 4 0.3757797 0.2378545 [s] 4 [m/s] summary(d) ##        x                y                z        ##  Min.   :0.1249   Min.   :0.2379   Min.   :1.00   ##  1st Qu.:0.1861   1st Qu.:0.4484   1st Qu.:1.75   ##  Median :0.2499   Median :0.5239   Median :2.50   ##  Mean   :0.2501   Mean   :0.5330   Mean   :2.50   ##  3rd Qu.:0.3139   3rd Qu.:0.6085   3rd Qu.:3.25   ##  Max.   :0.3758   Max.   :0.8463   Max.   :4.00 d$yz = with(d, y * z) d ##           x             y       z            yz ## 1 0.2064370 0.8463468 [s] 1 [m/s] 0.8463468 [m] ## 2 0.1249422 0.5292048 [s] 2 [m/s] 1.0584095 [m] ## 3 0.2932732 0.5186254 [s] 3 [m/s] 1.5558761 [m] ## 4 0.3757797 0.2378545 [s] 4 [m/s] 0.9514180 [m] d[1, \"yz\"] ## 0.8463468 [m]"},{"path":"/articles/units.html","id":"formatting","dir":"Articles","previous_headings":"","what":"Formatting","title":"Units of Measurement for R Vectors: an Introduction","text":"Units often written form m2 s-1, square meter per second. can defined unit, also parsed as_units: udunits understands string, can convert Printing units form done ","code":"(x = 1:10 * as_units(\"m2 s-1\")) ## Units: [m^2/s] ##  [1]  1  2  3  4  5  6  7  8  9 10 y = 1:10 * make_units(m^2/s) x + y ## Units: [m^2/s] ##  [1]  2  4  6  8 10 12 14 16 18 20 deparse_unit(x) ## [1] \"m2 s-1\""},{"path":"/articles/units.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Units of Measurement for R Vectors: an Introduction","text":"Base scatter plots histograms support automatic unit placement axis labels. following example first convert SI units. (Unit needs bit special treatment, reserved word R.)  can change grouping symbols [ ] ( ):  can also remove grouping symbols, increase space variable name unit :  complex units can plotted either negative powers, divisions, modifying one units’s global options using units_options:   usual, units modify automatically expressions:","code":"mar = par(\"mar\") + c(0, .3, 0, 0) displacement = mtcars$disp * as_units(\"in\")^3 units(displacement) = make_units(cm^3) weight = mtcars$wt * 1000 * make_units(lb) units(weight) = make_units(kg) par(mar = mar) plot(weight, displacement) units_options(group = c(\"(\", \")\") )  # parenthesis instead of square brackets par(mar = mar) plot(weight, displacement) units_options(sep = c(\"~~~\", \"~\"), group = c(\"\", \"\"))  # no brackets; extra space par(mar = mar) plot(weight, displacement) gallon = as_units(\"gallon\") consumption = mtcars$mpg * make_units(mi/gallon) units(consumption) = make_units(km/l) par(mar = mar) plot(displacement, consumption) # division in consumption units_options(negative_power = TRUE) # division becomes ^-1 plot(displacement, consumption) # division in consumption units_options(negative_power = TRUE) # division becomes ^-1 par(mar = mar) plot(displacement, consumption) plot(1/displacement, 1/consumption)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edzer Pebesma. Author, maintainer. Thomas Mailund. Author. Tomasz Kalinowski. Author. James Hiebert. Contributor. Iñaki Ucar. Author. Thomas Lin Pedersen. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pebesma E, Mailund T, Hiebert J (2016). “Measurement Units R.” R Journal, 8(2), 486–494. doi:10.32614/RJ-2016-061.","code":"@Article{,   title = {Measurement Units in {R}},   author = {Edzer Pebesma and Thomas Mailund and James Hiebert},   year = {2016},   journal = {R Journal},   doi = {10.32614/RJ-2016-061},   pages = {486--494},   volume = {8},   number = {2}, }"},{"path":"/index.html","id":"id_-measurement-units-for-r","dir":"","previous_headings":"","what":"Measurement Units for R Vectors","title":"Measurement Units for R Vectors","text":"Support measurement units R vectors, matrices arrays: automatic propagation, conversion, derivation simplification units; raising errors case unit incompatibility. Compatible POSIXct, Date difftime classes. Uses UNIDATA udunits library unit database unit compatibility checking conversion.","code":""},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Measurement Units for R Vectors","text":"Documentation provided R Journal publication. Cite package : Edzer Pebesma, Thomas Mailund James Hiebert (2016). “Measurement Units R.” R Journal, 8 (2), 486–494. DOI: 10.32614/RJ-2016-061 main units vignette derives manuscript kept date package development. Blog posts: first, second, third. UNIDATA udunits2 library GitHub.","code":""},{"path":"/index.html","id":"what-it-does","dir":"","previous_headings":"","what":"What it does","title":"Measurement Units for R Vectors","text":"Package units provides measurement units R vectors: conversion, derivation, simplification error checking:","code":"library(units) (spd1 = set_units(1:5, m/s)) # Units: m/s # [1] 1 2 3 4 5 (spd2 = set_units(1:5, km/h)) # Units: km/h # [1] 1 2 3 4 5 spd1 + spd2                   # automatic conversion # Units: m/s # [1] 1.277778 2.555556 3.833333 5.111111 6.388889 spd1 * spd2                   # unit derivation # Units: km*m/h/s # [1]  1  4  9 16 25 spd1 * set_units(10, s) # unit simplification # Units: m # [1] 10 20 30 40 50 spd1 + set_units(10, s) # error checking #   cannot convert s into m/s"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Measurement Units for R Vectors","text":"Install release version CRAN: installation development version GitHub requires, e.g., remotes package: installation fails due missing udunits2 system library, either install e.g. Ubuntu Debian Fedora RHEL/CentOS MacOS equivalent distribution. Alternatively, install sources downloading latest version UDUNITS downloads, executing following commands download directory: , retry installation units.","code":"install.packages(\"units\") remotes::install_github(\"r-quantities/units\") sudo apt-get install libudunits2-dev sudo dnf install udunits2-devel brew install udunits tar zxf udunits-<version>.tar.gz cd ./udunits-<version>/ ./configure make sudo make install sudo ldconfig"},{"path":"/reference/Math.units.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical operations for units objects — Math.units","title":"Mathematical operations for units objects — Math.units","text":"Mathematical operations units objects","code":""},{"path":"/reference/Math.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical operations for units objects — Math.units","text":"","code":"# S3 method for class 'units' Math(x, ...)"},{"path":"/reference/Math.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical operations for units objects — Math.units","text":"x object class units ... parameters passed Math functions","code":""},{"path":"/reference/Math.units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mathematical operations for units objects — Math.units","text":"Logarithms receive special treatment underlying udunits2 library. natural logarithm applied unit, result ln(re 1 unit), means natural logarithm referenced 1 unit. base 2 base 10 logarithms, output lb(...) lg(...) respectively instead ln(...). particularly important units typically expressed logarithmic scale (.e., bels, , commonly, decibels), Watts Volts. units, default udunits2 database contains aliases: e.g., BW (bel-Watts) alias lg(re 1 W); Bm (bel-milliWatts) alias lg(re 0.001 W); BV alias lg(re 1 V) (bel-Volts), forth (see output valid_udunits() reference). Additionally, units package defines B, bel, default (defined udunits2) alias lg(re 1), unless user-provided XML database already contains definition B, define_bel option set FALSE (see help(units_options)).","code":""},{"path":"/reference/Math.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mathematical operations for units objects — Math.units","text":"","code":"# roundings, cummulative functions x <- set_units(sqrt(1:10), m/s) signif(x, 2) #> Units: [m/s] #>  [1] 1.0 1.4 1.7 2.0 2.2 2.4 2.6 2.8 3.0 3.2 cumsum(x) #> Units: [m/s] #>  [1]  1.000000  2.414214  4.146264  6.146264  8.382332 10.831822 13.477573 #>  [8] 16.306001 19.306001 22.468278  # trigonometry sin(x) # not meaningful #> Warning: Operation sin not meaningful for units #>  [1]  0.84147098  0.98776595  0.98702664  0.90929743  0.78674913  0.63815764 #>  [7]  0.47577184  0.30807174  0.14112001 -0.02068353 x <- set_units(sqrt(1:10), rad) sin(x) #> Units: [1] #>  [1]  0.84147098  0.98776595  0.98702664  0.90929743  0.78674913  0.63815764 #>  [7]  0.47577184  0.30807174  0.14112001 -0.02068353 cos(x) #> Units: [1] #>  [1]  0.5403023  0.1559437 -0.1605565 -0.4161468 -0.6172729 -0.7699057 #>  [7] -0.8795687 -0.9513631 -0.9899925 -0.9997861 x <- set_units(seq(0, 1, 0.1), 1) asin(x) #> Units: [rad] #>  [1] 0.0000000 0.1001674 0.2013579 0.3046927 0.4115168 0.5235988 0.6435011 #>  [8] 0.7753975 0.9272952 1.1197695 1.5707963 acos(x) #> Units: [rad] #>  [1] 1.5707963 1.4706289 1.3694384 1.2661037 1.1592795 1.0471976 0.9272952 #>  [8] 0.7953988 0.6435011 0.4510268 0.0000000  # logarithms x <- set_units(sqrt(1:10), W) log(x) # base exp(1) #> Units: [ln(re 1 W)] #>  [1] 0.0000000 0.3465736 0.5493061 0.6931472 0.8047190 0.8958797 0.9729551 #>  [8] 1.0397208 1.0986123 1.1512925 log(x, base = 3) #> Units: [0.910239226626837 ln(re 1 W)] #>  [1] 0.0000000 0.3154649 0.5000000 0.6309298 0.7324868 0.8154649 0.8856219 #>  [8] 0.9463946 1.0000000 1.0479516 log2(x) #> Units: [lb(re 1 W)] #>  [1] 0.0000000 0.5000000 0.7924813 1.0000000 1.1609640 1.2924813 1.4036775 #>  [8] 1.5000000 1.5849625 1.6609640 log10(x) #> Units: [lg(re 1 W)] #>  [1] 0.0000000 0.1505150 0.2385606 0.3010300 0.3494850 0.3890756 0.4225490 #>  [8] 0.4515450 0.4771213 0.5000000 set_units(x, dBW) # decibel-watts #> Units: [dBW] #>  [1] 0.000000 1.505150 2.385606 3.010300 3.494850 3.890756 4.225490 4.515450 #>  [9] 4.771213 5.000000 set_units(x, dBm) # decibel-milliwatts #> Units: [dBm] #>  [1] 30.00000 31.50515 32.38561 33.01030 33.49485 33.89076 34.22549 34.51545 #>  [9] 34.77121 35.00000"},{"path":"/reference/Ops.units.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Ops Group Generic Functions for units objects — Ops.units","title":"S3 Ops Group Generic Functions for units objects — Ops.units","text":"Ops functions units objects, including comparison, product divide, add, subtract.","code":""},{"path":"/reference/Ops.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Ops Group Generic Functions for units objects — Ops.units","text":"","code":"# S3 method for class 'units' Ops(e1, e2)"},{"path":"/reference/Ops.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Ops Group Generic Functions for units objects — Ops.units","text":"e1 object class units, something can coerced as_units(e1) e2 object class units, something can coerced as_units(e2), case power number (integer n 1/n)","code":""},{"path":"/reference/Ops.units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Ops Group Generic Functions for units objects — Ops.units","text":"object class units","code":""},{"path":"/reference/Ops.units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 Ops Group Generic Functions for units objects — Ops.units","text":"Users advised performing arithmetical operations temperatures different units. units package ensure results 1) arithmetically correct, 2) satisfy dimensional analysis, never ensure results physically meaningful. Temperature units special absolute unit, Kelvin, relative ones, Celsius Fahrenheit degrees. Arithmetic operations meaningless physical standpoint. Users thus advised convert temperatures Kelvin operating.","code":""},{"path":"/reference/Ops.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Ops Group Generic Functions for units objects — Ops.units","text":"","code":"a <- set_units(1:3, m/s) b <- set_units(1:3, m/s) a + b #> Units: [m/s] #> [1] 2 4 6 a * b #> Units: [m^2/s^2] #> [1] 1 4 9 a / b #> Units: [1] #> [1] 1 1 1 a <- as_units(\"kg m-3\") b <- set_units(1, kg/m/m/m) a + b #> 2 [kg/m^3] a = set_units(1:5, m) a %/% a #> Units: [1] #> [1] 1 1 1 1 1 a %/% set_units(2) #> Units: [m] #> [1] 0 1 1 2 2 set_units(1:5, m^2) %/% set_units(2, m) #> Units: [m] #> [1] 0 1 1 2 2 a %% a #> Units: [m] #> [1] 0 0 0 0 0 a %% set_units(2) #> Units: [m] #> [1] 1 0 1 0 1"},{"path":"/reference/as_difftime.html","id":null,"dir":"Reference","previous_headings":"","what":"convert units object into difftime object — as_difftime","title":"convert units object into difftime object — as_difftime","text":"convert units object difftime object","code":""},{"path":"/reference/as_difftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert units object into difftime object — as_difftime","text":"","code":"as_difftime(x)"},{"path":"/reference/as_difftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert units object into difftime object — as_difftime","text":"x object class units","code":""},{"path":"/reference/as_difftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert units object into difftime object — as_difftime","text":"","code":"t1 = Sys.time() t2 = t1 + 3600 d = t2 - t1 du <- as_units(d) dt = as_difftime(du) class(dt) #> [1] \"difftime\" dt #> Time difference of 1 hours"},{"path":"/reference/boxplot.units.html","id":null,"dir":"Reference","previous_headings":"","what":"boxplot for unit objects — boxplot.units","title":"boxplot for unit objects — boxplot.units","text":"boxplot unit objects","code":""},{"path":"/reference/boxplot.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"boxplot for unit objects — boxplot.units","text":"","code":"# S3 method for class 'units' boxplot(x, ..., horizontal = FALSE)"},{"path":"/reference/boxplot.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"boxplot for unit objects — boxplot.units","text":"x object class units, want plot boxplot ... parameters passed boxplot.default horizontal logical indicating boxplots horizontal; default FALSE means vertical boxes.","code":""},{"path":"/reference/boxplot.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"boxplot for unit objects — boxplot.units","text":"","code":"units_options(parse = FALSE) # otherwise we break on the funny symbol! u = set_units(rnorm(100), degree_C) boxplot(u)"},{"path":"/reference/cbind.units.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine R Objects by Rows or Columns — cbind.units","title":"Combine R Objects by Rows or Columns — cbind.units","text":"S3 methods units objects (see cbind).","code":""},{"path":"/reference/cbind.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine R Objects by Rows or Columns — cbind.units","text":"","code":"# S3 method for class 'units' cbind(..., deparse.level = 1)  # S3 method for class 'units' rbind(..., deparse.level = 1)"},{"path":"/reference/cbind.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine R Objects by Rows or Columns — cbind.units","text":"... (generalized) vectors matrices.  can given named     arguments.  R objects may coerced appropriate, S4     methods may used: see sections ‘Details’     ‘Value’.  (\"data.frame\" method cbind     can arguments data.frame     stringsAsFactors.) deparse.level integer controlling construction labels     case non-matrix-like arguments (default method):deparse.level = 0 constructs labels;     default deparse.level = 1 typically     deparse.level = 2 always construct labels argument     names, see ‘Value’ section .","code":""},{"path":"/reference/cbind.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine R Objects by Rows or Columns — cbind.units","text":"","code":"x <- set_units(1, m/s) y <- set_units(1:3, m/s) z <- set_units(8:10, m/s) (m <- cbind(x, y)) # the '1' (= shorter vector) is recycled #> Units: [m/s] #>      x y #> [1,] 1 1 #> [2,] 1 2 #> [3,] 1 3 (m <- cbind(m, z)[, c(1, 3, 2)]) # insert a column #> Units: [m/s] #>      x  z y #> [1,] 1  8 1 #> [2,] 1  9 2 #> [3,] 1 10 3 (m <- rbind(m, z)) # insert a row #> Units: [m/s] #>   x  z  y #>   1  8  1 #>   1  9  2 #>   1 10  3 #> z 8  9 10"},{"path":"/reference/convert_to_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert units to their base units — convert_to_base","title":"Convert units to their base units — convert_to_base","text":"Convert units units object base units, defined udunits database (SI units).","code":""},{"path":"/reference/convert_to_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert units to their base units — convert_to_base","text":"","code":"convert_to_base(x, simplify = TRUE, keep_fraction = TRUE)"},{"path":"/reference/convert_to_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert units to their base units — convert_to_base","text":"x object class units. simplify logical; TRUE (default), resulting units simplified. keep_fraction logical; TRUE (default), result kept fraction.","code":""},{"path":"/reference/convert_to_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert units to their base units — convert_to_base","text":"object class units units converted base units.","code":""},{"path":"/reference/convert_to_base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert units to their base units — convert_to_base","text":"","code":"x <- set_units(32, mJ/g) convert_to_base(x) #> 32 [J/kg] convert_to_base(x, keep_fraction=FALSE) #> 32 [Gy] convert_to_base(x, simplify=FALSE) #> 32 [m^2*kg/(s^2*kg)] convert_to_base(x, simplify=FALSE, keep_fraction=FALSE) #> 32 [m^2/s^2]"},{"path":"/reference/deparse_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"deparse unit to string in product power form (e.g. km m-2 s-1) — deparse_unit","title":"deparse unit to string in product power form (e.g. km m-2 s-1) — deparse_unit","text":"deparse unit string product power form (e.g. km m-2 s-1)","code":""},{"path":"/reference/deparse_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deparse unit to string in product power form (e.g. km m-2 s-1) — deparse_unit","text":"","code":"deparse_unit(x)"},{"path":"/reference/deparse_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deparse unit to string in product power form (e.g. km m-2 s-1) — deparse_unit","text":"x object class units","code":""},{"path":"/reference/deparse_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"deparse unit to string in product power form (e.g. km m-2 s-1) — deparse_unit","text":"length one character vector","code":""},{"path":"/reference/deparse_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"deparse unit to string in product power form (e.g. km m-2 s-1) — deparse_unit","text":"","code":"u = as_units(\"kg m-2 s-1\") u #> 1 [kg/(m^2*s)] deparse_unit(u) #> [1] \"kg m-2 s-1\""},{"path":"/reference/drop_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Units — drop_units","title":"Drop Units — drop_units","text":"Drop units attribute class.","code":""},{"path":"/reference/drop_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Units — drop_units","text":"","code":"drop_units(x)  # S3 method for class 'units' drop_units(x)  # S3 method for class 'data.frame' drop_units(x)  # S3 method for class 'mixed_units' drop_units(x)"},{"path":"/reference/drop_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Units — drop_units","text":"x object units metadata.","code":""},{"path":"/reference/drop_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Units — drop_units","text":"numeric without units attributes, preserving attributes like dimensions classes.","code":""},{"path":"/reference/drop_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop Units — drop_units","text":"Equivalent units(x) <- NULL, pipe-friendly version set_units(x, NULL), drop_units fail object units metadata. Use alternatives want operation succeed regardless object type. data.frame method also provided, checks every column drops units .","code":""},{"path":"/reference/drop_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop Units — drop_units","text":"","code":"x <- 1 y <- set_units(x, m/s)  # this succeeds drop_units(y) #> [1] 1 set_units(y, NULL) #> [1] 1 set_units(x, NULL) #> [1] 1  if (FALSE) { # \\dontrun{ # this fails drop_units(x) } # }  df <- data.frame(x=x, y=y) df #>   x       y #> 1 1 1 [m/s] drop_units(df) #>   x y #> 1 1 1"},{"path":"/reference/hist.units.html","id":null,"dir":"Reference","previous_headings":"","what":"histogram for unit objects — hist.units","title":"histogram for unit objects — hist.units","text":"histogram unit objects","code":""},{"path":"/reference/hist.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"histogram for unit objects — hist.units","text":"","code":"# S3 method for class 'units' hist(x, xlab = NULL, main = paste(\"Histogram of\", xname),   ...)"},{"path":"/reference/hist.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"histogram for unit objects — hist.units","text":"x object class units, want plot histogram xlab character; x axis label main character; title histogram ... parameters passed hist.default","code":""},{"path":"/reference/hist.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"histogram for unit objects — hist.units","text":"","code":"units_options(parse = FALSE) # otherwise we break on the funny symbol! u = set_units(rnorm(100), degree_C) hist(u)"},{"path":"/reference/install_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Define or remove units — install_unit","title":"Define or remove units — install_unit","text":"Installing new symbols /names allows used as_units, make_units set_units. Optionally, relationship can defined symbols/names existing ones (see details examples).","code":""},{"path":"/reference/install_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define or remove units — install_unit","text":"","code":"install_unit(symbol = character(0), def = character(0),   name = character(0))  remove_unit(symbol = character(0), name = character(0))"},{"path":"/reference/install_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define or remove units — install_unit","text":"symbol vector symbols installed/removed. def either empty definition, defines new base unit; \"unitless\", defines new dimensionless unit; relationship existing units (see details syntax). name vector names installed/removed.","code":""},{"path":"/reference/install_unit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define or remove units — install_unit","text":"least one symbol name expected, multiple symbols /names can installed (thus mapped unit) removed time. def argument enables arbitrary relationships existing units using UDUNITS-2 syntax: may combined, e.g., \"0.1 lg(re m/(5 s)^2) @ 50\". may also look <def> elements units database see examples string unit specifications.","code":""},{"path":"/reference/install_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define or remove units — install_unit","text":"","code":"# define a fortnight install_unit(\"fn\", \"2 week\", \"fortnight\") year <- as_units(\"year\") set_units(year, fn)        # by symbol #> 26.08873 [fn] set_units(year, fortnight) # by name #> 26.08873 [fn] # clean up remove_unit(\"fn\", \"fortnight\")  # working with currencies install_unit(\"dollar\") install_unit(\"euro\", \"1.22 dollar\") install_unit(\"yen\", \"0.0079 euro\") set_units(as_units(\"dollar\"), yen) #> 103.756 [yen] # clean up remove_unit(c(\"dollar\", \"euro\", \"yen\"))  # an example from microbiology cfu_symbols <- c(\"CFU\", \"cfu\") cfu_names <- c(\"colony_forming_unit\", \"ColonyFormingUnit\") install_unit(\"cell\") install_unit(cfu_symbols, \"3.4 cell\", cfu_names) cell <- set_units(2.5e5, cell) vol <- set_units(500, ul) set_units(cell/vol, \"cfu/ml\") #> 147058.8 [CFU/ml] set_units(cell/vol, \"CFU/ml\") #> 147058.8 [CFU/ml] set_units(cell/vol, \"colony_forming_unit/ml\") #> 147058.8 [CFU/ml] set_units(cell/vol, \"ColonyFormingUnit/ml\") #> 147058.8 [CFU/ml] # clean up remove_unit(c(\"cell\", cfu_symbols), cfu_names)"},{"path":"/reference/keep_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function keeping units — keep_units","title":"Apply a function keeping units — keep_units","text":"Helper function apply function units object restore original units.","code":""},{"path":"/reference/keep_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function keeping units — keep_units","text":"","code":"keep_units(FUN, x, ..., unit = units(x))"},{"path":"/reference/keep_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function keeping units — keep_units","text":"FUN function applied. x first argument FUN, class units. ... optional arguments FUN. unit symbolic unit restore FUN.","code":""},{"path":"/reference/keep_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function keeping units — keep_units","text":"object class units.","code":""},{"path":"/reference/keep_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function keeping units — keep_units","text":"Provided incompatible functions preserve units. user responsible ensuring correctness output. x units object unit provided user, warning issued, output also units (see examples).","code":""},{"path":"/reference/keep_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function keeping units — keep_units","text":"","code":"x <- set_units(1:5, m) keep_units(drop_units, x) #> Units: [m] #> [1] 1 2 3 4 5  # An example use case is with random number generating functions: mu <- as_units(10, \"years\") keep_units(rnorm, n = 1, x = mu) #> 9.659362 [years]  # units can be directly specified if needed; for example, with # `rexp()`, the units of the rate parameter are the inverse of # the units of the output: rate <- as_units(3, \"1/year\") keep_units(rexp, n = 1, x = rate, unit = units(1/rate)) #> 0.1894483 [year]  # if `x` does not actually have units, a warning is issued, # and the output has no units: rate2 <- 3 keep_units(rexp, n = 1, x = rate2) #> Warning: wrong `unit` specification. #> [1] 0.2546047"},{"path":"/reference/load_units_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a unit system — load_units_xml","title":"Load a unit system — load_units_xml","text":"Load XML database containing unit system compatible UDUNITS2.","code":""},{"path":"/reference/load_units_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a unit system — load_units_xml","text":"","code":"load_units_xml(path = default_units_xml())"},{"path":"/reference/load_units_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a unit system — load_units_xml","text":"path path valid unit system XML format.","code":""},{"path":"/reference/load_units_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a unit system — load_units_xml","text":"unit system comprises root <unit-system> number children defining prefixes (<prefix>) units (<unit>). See contents system.file(\"share/udunits\", package=\"units\") examples.","code":""},{"path":"/reference/load_units_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a unit system — load_units_xml","text":"","code":"# load a new unit system load_units_xml(system.file(\"share/udunits/udunits2-base.xml\", package=\"units\")) if (FALSE) { # \\dontrun{ set_units(1, rad) # doesn'twork } # }  # reload the default unit system load_units_xml() set_units(1, rad) # works again #> 1 [rad]"},{"path":"/reference/matrixOps.units.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 matrixOps Group Generic Functions for units objects — matrixOps.units","title":"S3 matrixOps Group Generic Functions for units objects — matrixOps.units","text":"matrixOps functions units objects.","code":""},{"path":"/reference/matrixOps.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 matrixOps Group Generic Functions for units objects — matrixOps.units","text":"","code":"# S3 method for class 'units' matrixOps(x, y)"},{"path":"/reference/matrixOps.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 matrixOps Group Generic Functions for units objects — matrixOps.units","text":"x object class units, something can coerced as_units(x) y object class units, something can coerced as_units(y)","code":""},{"path":"/reference/matrixOps.units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 matrixOps Group Generic Functions for units objects — matrixOps.units","text":"object class units","code":""},{"path":"/reference/matrixOps.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 matrixOps Group Generic Functions for units objects — matrixOps.units","text":"","code":"a = set_units(1:5, m) a %*% a #> Units: [m^2] #>      [,1] #> [1,]   55 a %*% t(a) #> Units: [m^2] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]    2    4    6    8   10 #> [3,]    3    6    9   12   15 #> [4,]    4    8   12   16   20 #> [5,]    5   10   15   20   25 a %*% 1:5 #> Units: [m] #>      [,1] #> [1,]   55 1:5 %*% a #> Units: [m] #>      [,1] #> [1,]   55"},{"path":"/reference/mixed_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or convert to a mixed units list-column — mixed_units","title":"Create or convert to a mixed units list-column — mixed_units","text":"Create convert mixed units list-column","code":""},{"path":"/reference/mixed_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or convert to a mixed units list-column — mixed_units","text":"","code":"mixed_units(x, values, ...)  # S3 method for class 'mixed_units' units(x) <- value"},{"path":"/reference/mixed_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or convert to a mixed units list-column — mixed_units","text":"x numeric, vector class units values character vector units encodings, list symbolic units class mixed_symbolic_units ... ignored value see values","code":""},{"path":"/reference/mixed_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create or convert to a mixed units list-column — mixed_units","text":"x class units, values missing class mixed_symbolic_units; x numeric, values character vector length x.","code":""},{"path":"/reference/mixed_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or convert to a mixed units list-column — mixed_units","text":"","code":"a <- 1:4 u <- c(\"m/s\", \"km/h\", \"mg/L\", \"g\") mixed_units(a, u) #> Mixed units: m/s (1), km/h (1), mg/L (1), g (1)  #> 1 [m/s], 2 [km/h], 3 [mg/L], 4 [g]  units(a) = as_units(\"m/s\") mixed_units(a) # converts to mixed representation #> Mixed units: m/s (4)  #> 1 [m/s], 2 [m/s], 3 [m/s], 4 [m/s]"},{"path":"/reference/plot.units.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot units objects — plot.units","title":"Plot units objects — plot.units","text":"Create axis label appropriate labels. Plot method units objects.","code":""},{"path":"/reference/plot.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot units objects — plot.units","text":"","code":"make_unit_label(lab, u, sep = units_options(\"sep\"),   group = units_options(\"group\"), parse = units_options(\"parse\"))  # S3 method for class 'units' plot(x, y, xlab = NULL, ylab = NULL, ...)"},{"path":"/reference/plot.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot units objects — plot.units","text":"lab length one character; name variable plot u vector class units sep length two character vector, defaulting c(\"~\",\"~\"), white space unit name unit symbols, subsequent symbols. group length two character vector grouping symbols, e.g. c(\"(\",\")\") parenthesis, c(\"\",\"\") group symbols parse logical; indicates whether parseable expression returned (typically needed super scripts), simple character string without special formatting. x object class units, plot along x axis, , y missing, along y axis y object plot along y axis, missing xlab character; x axis label ylab character; y axis label ... parameters, passed plot.default","code":""},{"path":"/reference/plot.units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot units objects — plot.units","text":"units_options can used set change defaults   sep, group doParse.","code":""},{"path":"/reference/plot.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot units objects — plot.units","text":"","code":"displacement = mtcars$disp * as_units(\"in\")^3 units(displacement) = make_units(cm^3) weight = mtcars$wt * 1000 * make_units(lb) units(weight) = make_units(kg) plot(weight, displacement)   units_options(group = c(\"(\", \")\") )  # parenthesis instead of square brackets plot(weight, displacement)   units_options(sep = c(\"~~~\", \"~\"), group = c(\"\", \"\"))  # no brackets; extra space plot(weight, displacement)   units_options(sep = c(\"~\", \"~~\"), group = c(\"[\", \"]\")) gallon = as_units(\"gallon\") consumption = mtcars$mpg * make_units(mi/gallon) units(consumption) = make_units(km/l) plot(displacement, consumption) # division in consumption   units_options(negative_power = TRUE) # division becomes ^-1 plot(displacement, consumption)   plot(1/displacement, 1/consumption)"},{"path":"/reference/scale_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous scales for units data — scale_units","title":"Continuous scales for units data — scale_units","text":"default scales units class. usually added automatically. override manually, use scale_{type}_units.","code":""},{"path":"/reference/scale_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous scales for units data — scale_units","text":"","code":"scale_x_units(..., sec.axis = ggplot2::waiver(), unit = NULL)  scale_y_units(..., sec.axis = ggplot2::waiver(), unit = NULL)  scale_colour_units(..., unit = NULL)  scale_color_units(..., unit = NULL)  scale_fill_units(..., unit = NULL)  scale_alpha_units(..., unit = NULL)  scale_size_units(..., unit = NULL)  scale_size_area_units(..., unit = NULL)  scale_radius_units(..., unit = NULL)  scale_linewidth_units(..., unit = NULL)"},{"path":"/reference/scale_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous scales for units data — scale_units","text":"... arguments passed corresponding continuous scale (see manual page scale_{type} details). sec.axis sec_axis() used specify secondary axis. unit unit specification use guide. given, values converted unit plotting. error thrown specified unit incompatible unit data.","code":""},{"path":"/reference/scale_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continuous scales for units data — scale_units","text":"","code":"if (requireNamespace(\"ggplot2\", quietly=TRUE)) {  library(ggplot2)  mtcars$consumption <- set_units(mtcars$mpg, mi / gallon) mtcars$power <- set_units(mtcars$hp, hp)  # Use units encoded into the data ggplot(mtcars) +   geom_point(aes(power, consumption))  # Convert units on the fly during plotting ggplot(mtcars) +   geom_point(aes(power, consumption)) +   scale_x_units(unit = \"W\") +   scale_y_units(unit = \"km/l\")  # Resolve units when transforming data ggplot(mtcars) +   geom_point(aes(power, 1 / consumption))  # Reverse the y axis ggplot(mtcars) +   geom_point(aes(power, consumption)) +   scale_y_units(transform=\"reverse\")  }"},{"path":"/reference/seq.units.html","id":null,"dir":"Reference","previous_headings":"","what":"seq method for units objects — seq.units","title":"seq method for units objects — seq.units","text":"seq method units objects","code":""},{"path":"/reference/seq.units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"seq method for units objects — seq.units","text":"","code":"# S3 method for class 'units' seq(from, to, by = ((to - from)/(length.out - 1)),   length.out = NULL, along.with = NULL, ...)"},{"path":"/reference/seq.units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"seq method for units objects — seq.units","text":"see seq see seq see seq length.see seq along.see seq ... see seq","code":""},{"path":"/reference/seq.units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"seq method for units objects — seq.units","text":"arguments units converted units first argument (either )","code":""},{"path":"/reference/seq.units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"seq method for units objects — seq.units","text":"","code":"seq(to = set_units(10, m), by = set_units(1, m), length.out = 5) #> Units: [m] #> [1]  6  7  8  9 10 seq(set_units(10, m), by = set_units(1, m), length.out = 5) #> Units: [m] #> [1] 10 11 12 13 14 seq(set_units(10, m), set_units(19, m)) #> Units: [m] #>  [1] 10 11 12 13 14 15 16 17 18 19 seq(set_units(10, m), set_units(.1, km), set_units(10000, mm)) #> Units: [m] #>  [1]  10  20  30  40  50  60  70  80  90 100"},{"path":"/reference/udunits2.html","id":null,"dir":"Reference","previous_headings":"","what":"udunits2 utilities — udunits2","title":"udunits2 utilities — udunits2","text":"udunits2 utilities exposed user. functions useful checking whether units convertible converting units without create units objects. Arguments recycled necessary.","code":""},{"path":"/reference/udunits2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"udunits2 utilities — udunits2","text":"","code":"ud_are_convertible(from, to, ...)  ud_convert(x, from, to)"},{"path":"/reference/udunits2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"udunits2 utilities — udunits2","text":", character vector object class symbolic_units, symbol(s) original unit(s) unit convert respectively. ... unused. x numeric vector","code":""},{"path":"/reference/udunits2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"udunits2 utilities — udunits2","text":"ud_are_convertible returns TRUE units exist convertible, FALSE otherwise. ud_convert returns numeric vector x converted new unit.","code":""},{"path":"/reference/udunits2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"udunits2 utilities — udunits2","text":"","code":"ud_are_convertible(c(\"m\", \"mm\"), \"km\") #> [1] TRUE TRUE ud_convert(c(100, 100000), c(\"m\", \"mm\"), \"km\") #> [1] 0.1 0.1  a <- set_units(1:3, m/s) ud_are_convertible(units(a), \"km/h\") #> [1] TRUE ud_convert(1:3, units(a), \"km/h\") #> [1]  3.6  7.2 10.8  ud_are_convertible(\"degF\", \"degC\") #> [1] TRUE ud_convert(32, \"degF\", \"degC\") #> [1] 3.552714e-14"},{"path":"/reference/unitless.html","id":null,"dir":"Reference","previous_headings":"","what":"The ","title":"The ","text":"\"unit\" type vectors actually dimension-less.","code":""},{"path":"/reference/unitless.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ","text":"","code":"unitless"},{"path":"/reference/unitless.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The ","text":"object class symbolic_units length 2.","code":""},{"path":"/reference/units-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in units — units-defunct","title":"Defunct functions in units — units-defunct","text":"functions longer available.","code":""},{"path":"/reference/units-defunct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defunct functions in units — units-defunct","text":"ud_units: Use as_units instead. .units: Use as_units instead. make_unit: Use as_units instead. parse_unit: Use as_units instead. as_cf: Use deparse_unit instead. install_symbolic_unit: Use install_unit instead. remove_symbolic_unit: Use remove_unit instead. install_conversion_constant: Use install_unit instead. install_conversion_offset: Use install_unit instead.","code":""},{"path":"/reference/units.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle measurement units — units","title":"Handle measurement units — units","text":"number functions provided handling unit objects. `units<-` units basic functions set     retrieve units. as_units, generic methods     character string quoted language. Note, direct usage function     users typically necessary, coercion via as_units     automatically done `units<-` set_units. make_units, constructs units bare expressions.     make_units(m/s) equivalent as_units(quote(m/s)). set_units, pipe-friendly version `units<-`.     default operates bare expressions,     behavior can disabled specifying mode = \"standard\" setting     units_options(set_units_mode = \"standard\").     value missing set 1, object becomes unitless.","code":""},{"path":"/reference/units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle measurement units — units","text":"","code":"# S3 method for class 'numeric' units(x) <- value  # S3 method for class 'units' units(x) <- value  # S3 method for class 'logical' units(x) <- value  # S3 method for class 'units' units(x)  # S3 method for class 'symbolic_units' units(x)  set_units(x, value, ..., mode = units_options(\"set_units_mode\"))  make_units(bare_expression, check_is_valid = TRUE)  as_units(x, ...)  # Default S3 method as_units(x, value = unitless, ...)  # S3 method for class 'units' as_units(x, value, ...)  # S3 method for class 'symbolic_units' as_units(x, value, ...)  # S3 method for class 'difftime' as_units(x, value, ...)  # S3 method for class 'character' as_units(x, ..., check_is_valid = TRUE,   force_single_symbol = FALSE)  # S3 method for class 'call' as_units(x, ...)  # S3 method for class 'expression' as_units(x, ...)  # S3 method for class 'name' as_units(x, ...)  # S3 method for class 'POSIXt' as_units(x, value, ...)  # S3 method for class 'Date' as_units(x, value, ...)"},{"path":"/reference/units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle measurement units — units","text":"x numeric vector, object class units. value object class units symbolic_units, case set_units expression symbols (see examples). ... passed methods. mode \"symbols\" (default), unit constructed expression supplied. Otherwise, ifmode = \"standard\", standard evaluation used supplied value argument can set via global option units_options(set_units_mode = \"standard\") bare_expression bare R expression describing units. Must valid R syntax (reserved R syntax words like must backticked) check_is_valid throw error unit symbols either recognized udunits2, custom user defined via install_unit(). FALSE, check validity performed. force_single_symbol Whether perform string parsing force treatment string single symbol.","code":""},{"path":"/reference/units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle measurement units — units","text":"object class units. units method retrieves units attribute, class symbolic_units.","code":""},{"path":"/reference/units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle measurement units — units","text":"value class units value unequal 1, value ignored unless units_options(\"simplifiy\") TRUE. simplify TRUE, x multiplied value.","code":""},{"path":"/reference/units.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Handle measurement units — units","text":"default, unit names automatically substituted unit names   (e.g., kilogram –> kg). turn behavior, set   units_options(auto_convert_names_to_symbols = FALSE)","code":""},{"path":"/reference/units.html","id":"character-strings","dir":"Reference","previous_headings":"","what":"Character strings","title":"Handle measurement units — units","text":"Generally speaking, 3 types unit strings accepted   as_units (extension, `units<-`). first type, likely common, \"standard\" format unit   specification relationship unit symbols names   specified explicitly arithmetic symbols division /,   multiplication * power exponents ^. second type unit string accepted one implicit exponents.   format, /, *, ^, may present   string, unit symbol names must separated space. unit   symbol may optionally followed single number, specifying power.   example \"m2 s-2\" equivalent \"(m^2)*(s^-2)\". string supplied fails parse, string treated   single symbolic unit symbolic_unit(chr) used fallback   warning. case, automatic unit simplification may work   properly performing operations unit objects, unit conversion   Math operations still give correct results long   unit string supplied returns TRUE ud_is_parsable(). must noted prepended numbers supported ,   treated magnitudes. example, \"1000 m\" interpreted   prefixed unit, equivalent \"km\" effects. third type unit string format accepted special case   udunits time duration reference origin, example \"hours   since 1970-01-01 00:00:00\". Note, handling time calendar   operations via udunits library subtly different way R   handles date time operations. functionality mostly exported   users work udunits time data, e.g., NetCDF files. Users   otherwise encouraged use R's date time functionality provided   Date POSIXt classes.","code":""},{"path":[]},{"path":"/reference/units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle measurement units — units","text":"","code":"x = 1:3 class(x) #> [1] \"integer\" units(x) <- as_units(\"m/s\") class(x) #> [1] \"units\" y = 2:5 a <- set_units(1:3, m/s) units(a) <- make_units(km/h) a #> Units: [km*h^-1] #> [1]  3.6  7.2 10.8 # convert to a mixed_units object: units(a) <- c(\"m/s\", \"km/h\", \"km/h\") a #> Mixed units: m*s^-1 (1), km*h^-1 (2)  #> 1 [m*s^-1], 7.2 [km*h^-1], 10.8 [km*h^-1]  # The easiest way to assign units to a numeric vector is like this: x <- y <- 1:4 units(x) <- \"m/s\"  # meters / second  # Alternatively, the easiest pipe-friendly way to set units: if(requireNamespace(\"magrittr\", quietly = TRUE)) {   library(magrittr)   y %>% set_units(m/s) } #> Units: [m*s^-1] #> [1] 1 2 3 4  # these are different ways of creating the same unit: # meters per second squared, i.e, acceleration x1 <- make_units(m/s^2) x2 <- as_units(quote(m/s^2)) x2 <- as_units(\"m/s^2\") x3 <- as_units(\"m s-2\") # in product power form, i.e., implicit exponents = T x4 <- set_units(1,  m/s^2) # by default, mode = \"symbols\" x5 <- set_units(1, \"m/s^2\",   mode = \"standard\") x6 <- set_units(1, x1,        mode = \"standard\") x7 <- set_units(1, units(x1), mode = \"standard\") x8 <- as_units(\"m\") / as_units(\"s\")^2  all_identical <- function(...) {   l <- list(...)   for(i in seq_along(l)[-1])     if(!identical(l[[1]], l[[i]]))       return(FALSE)   TRUE } all_identical(x1, x2, x3, x4, x5, x6, x7, x8) #> [1] TRUE  # Note, direct usage of these unit creation functions is typically not # necessary, since coercion is automatically done via as_units(). Again, # these are all equivalent ways to generate the same result.  x1 <- x2 <- x3 <- x4 <- x5 <- x6 <- x7 <- x8 <- 1:4 units(x1) <- \"m/s^2\" units(x2) <- \"m s-2\" units(x3) <- quote(m/s^2) units(x4) <- make_units(m/s^2) units(x5) <- as_units(quote(m/s^2)) x6 <- set_units(x6, m/s^2) x7 <- set_units(x7, \"m/s^2\", mode = \"standard\") x8 <- set_units(x8, units(x1), mode = \"standard\")  all_identical(x1, x2, x3, x4, x5, x6, x7, x8) #> [1] TRUE   # Both unit names or symbols can be used. By default, unit names are # automatically converted to unit symbols. make_units(degree_C) #> 1 [°C] make_units(kilogram) #> 1 [kg] make_units(ohm) #> 1 [Ω]  ## Arithmetic operations and units # conversion between unit objects that were defined as symbols and names will # work correctly, although unit simplification in printing may not always occur. x <- 500 * make_units(micrograms/liter) y <- set_units(200, ug/l) x + y #> 700 [micrograms*L^-1] x * y # numeric result is correct, but units not simplified completely #> 1e+05 [micrograms*ug*L^-2]  # note, plural form of unit name accepted too ('liters' vs 'liter'), and # denominator simplification can be performed correctly x * set_units(5, liters) #> 2500 [micrograms]  # unit conversion works too set_units(x, grams/gallon) #> 0.001892706 [g*gallon^-1]  ## Creating custom, user defined units # For example, a microbiologist might work with counts of bacterial cells # make_units(cells/ml) # by default, throws an ERROR # First define the unit, then the newly defined unit is accepted. install_unit(\"cells\") make_units(cells/ml) #> 1 [cells*ml^-1]  # Note that install_unit() adds support for defining relationships between # the newly created symbols or names and existing units.  ## set_units() # set_units is a pipe friendly version of `units<-`. if(requireNamespace(\"magrittr\", quietly = TRUE)) {   library(magrittr)   1:5 %>% set_units(N/m^2)   # first sets to m, then converts to km   1:5 %>% set_units(m) %>% set_units(km) } #> Units: [km] #> [1] 0.001 0.002 0.003 0.004 0.005  # set_units has two modes of operation. By default, it operates with # bare symbols to define the units. set_units(1:5, m/s) #> Units: [m*s^-1] #> [1] 1 2 3 4 5  # use `mode = \"standard\"` to use the value of supplied argument, rather than # the bare symbols of the expression. In this mode, set_units() can be # thought of as a simple alias for `units<-` that is pipe friendly. set_units(1:5, \"m/s\", mode = \"standard\") #> Units: [m*s^-1] #> [1] 1 2 3 4 5 set_units(1:5, make_units(m/s), mode = \"standard\") #> Units: [m*s^-1] #> [1] 1 2 3 4 5  # the mode of set_units() can be controlled via a global option # units_options(set_units_mode = \"standard\")  # To remove units use units(x) <- NULL # or set_units(x, NULL) #> [1] 500 # or drop_units(y) #> [1] 200 s = Sys.time() d  = s - (s+1) as_units(d) #> -1 [s]"},{"path":"/reference/units_options.html","id":null,"dir":"Reference","previous_headings":"","what":"set one or more units global options — units_options","title":"set one or more units global options — units_options","text":"set units global options, mostly related units printed plotted","code":""},{"path":"/reference/units_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set one or more units global options — units_options","text":"","code":"units_options(..., sep, group, negative_power, parse, set_units_mode,   strict_tokenizer, auto_convert_names_to_symbols, simplify, allow_mixed,   unitless_symbol, define_bel)"},{"path":"/reference/units_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set one or more units global options — units_options","text":"... named options (character) value queried sep character length two; default c(\"~\", \"~\"); space separator variable units, space separator two different units group character length two; start end group, may two empty strings, parenthesis pair, square brackets; default: square brackets. negative_power logical, default FALSE; denominators negative power, follow division symbol? parse logical, default TRUE; units made expression (get subscripts)? Setting FALSE may useful parse fails, e.g. unit contains symbols assume particular encoding set_units_mode character; either \"symbols\" \"standard\"; see set_units; default \"symbols\" strict_tokenizer logical, default FALSE; non-strict tokenization attaches constants following symbol. auto_convert_names_to_symbols logical, default TRUE: names, degree_C converted usual symbol? simplify logical, default NA; simplify units expressions? allow_mixed logical; TRUE, combining mixed units creates mixed_units object, FALSE generates error unitless_symbol character; set symbol use unitless (1) units define_bel logical; TRUE, define unit B (.e., bel, widely used deci- prefix dB, decibel) alias lg(re 1). TRUE default, unless B already defined existing XML database.","code":""},{"path":"/reference/units_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set one or more units global options — units_options","text":"case options set, invisibly named list option values set; option queried, current option value.","code":""},{"path":"/reference/units_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"set one or more units global options — units_options","text":"sets gets units options. Set using named arguments, get passing option name. default NA value simplify means units simplified set_units as_units, simplified arithmetical expressions.","code":""},{"path":"/reference/units_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set one or more units global options — units_options","text":"","code":"old = units_options(sep = c(\"~~~\", \"~\"), group = c(\"\", \"\")) # more space, parenthesis old #> $sep #> [1] \"~\"  \"~~\" #>  #> $group #> [1] \"[\" \"]\" #>  ## set back to defaults: units_options(sep = c(\"~\", \"~\"), group = c(\"[\", \"]\"), negative_power = FALSE, parse = TRUE) units_options(\"group\") #> [1] \"[\" \"]\""},{"path":"/reference/valid_udunits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about valid units — valid_udunits","title":"Get information about valid units — valid_udunits","text":"functions require xml2 package, return data frames complete information pre-defined units UDUNITS2. Inspect data frames determine inputs accepted as_units (functions powers: as_units, set_units , units<-).","code":""},{"path":"/reference/valid_udunits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about valid units — valid_udunits","text":"","code":"valid_udunits(quiet = FALSE)  valid_udunits_prefixes(quiet = FALSE)"},{"path":"/reference/valid_udunits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about valid units — valid_udunits","text":"quiet logical, defaults TRUE give message location udunits database read.","code":""},{"path":"/reference/valid_udunits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about valid units — valid_udunits","text":"data frame columns symbol , symbol_aliases ,   name_singular , name_singular_aliases , name_plural ,   name_plural_aliases , def , definition ,   comment , dimensionless source_xml","code":""},{"path":"/reference/valid_udunits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get information about valid units — valid_udunits","text":"entry listed symbol , symbol_aliases ,  name_singular , name_singular_aliases , name_plural , name_plural_aliases valid. Additionally, entry symbol symbol_aliases may can also contain valid prefix, specified valid_udunits_prefixes() . Note, primarily intended interactive use, exact format returned data frames may change future.","code":""},{"path":"/reference/valid_udunits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about valid units — valid_udunits","text":"","code":"if (requireNamespace(\"xml2\", quietly = TRUE)) {   valid_udunits()   valid_udunits_prefixes()   if(interactive())     View(valid_udunits()) } #> udunits database from /usr/share/xml/udunits/udunits2.xml #> udunits database from /usr/share/xml/udunits/udunits2.xml"},{"path":"/news/index.html","id":"version-10-0","dir":"Changelog","previous_headings":"","what":"version 1.0-0","title":"version 1.0-0","text":"Breaking change: new tokenizer fixes longstanding issues parsing complex unit expressions, may break existing code relied previous (buggy) behavior. major change now numbers consistently treated prefixes, units like ml / min / 1.73m^2 used physiology now correctly parsed ml / (min * 1.73 * m^2). See ?as_units details; #416 addressing #221, #383 Printing: follow NIST recommendations. particular, numerator denominator separated single slash, parenthesis used denominator contains several symbols (see example ); #86 Vectorize ud_*() helpers; #405 addressing #404 Loading units longer initializes RNG state; #409 Fix scale training ggplot2 scales; #412 Add scale_{type}_units() scales additional continuous aesthetics (colour, fill, alpha, size, linewidth); #369 Implement matrixOps.units, support %*% (R >= 4.3.0); #226 New convert_to_base() implements conversion base units; #132 @jamarav","code":""},{"path":"/news/index.html","id":"version-08-7","dir":"Changelog","previous_headings":"","what":"version 0.8-7","title":"version 0.8-7","text":"CRAN release: 2025-03-11 Deep copy ud_convert() input avoid side effects; #403 Set C++17 standard old versions R; #402","code":""},{"path":"/news/index.html","id":"version-08-6","dir":"Changelog","previous_headings":"","what":"version 0.8-6","title":"version 0.8-6","text":"CRAN release: 2025-03-07 Add methods cbind rbind; fixes #311 Performance improvements data.frame methods; suggested #361 @grcatlin Fix weighted.mean.units unitless objects; #363 Fix incorrect use round() %% %/% methods; #365 @UchidaMizuki Fix ggplot2 deprecation warnings; #367 Fix hist() error; #368 Add support lims() ggplot2 scales; #370 Fix simplification inverse units; #378 Replace call Rf_error() Rcpp::stop(); RcppCore/Rcpp#1247 Fix UBs C++ glue code; #380 Add support brew path discovery macOS; #384 Several performance improvements; #387, #388, #393, #400 addressing #386, #389 Improve keep_units() helper general usage scenarios; #394 @d-morrison addressing #392 Add ud_convert() convert units vector; #399 @dlebauer addressing #398 Fix scale_units upcoming version ggplot2; #401","code":""},{"path":"/news/index.html","id":"version-08-5","dir":"Changelog","previous_headings":"","what":"version 0.8-5","title":"version 0.8-5","text":"CRAN release: 2023-11-28 avoid -Wformat-security warning CRAN","code":""},{"path":"/news/index.html","id":"version-08-4","dir":"Changelog","previous_headings":"","what":"version 0.8-4","title":"version 0.8-4","text":"CRAN release: 2023-09-13 Identical unit division multiplication now respect units_options(simplify = FALSE) reverting change #310; #355 @billdenney Fix scale_units unit trans specified; #357","code":""},{"path":"/news/index.html","id":"version-08-3","dir":"Changelog","previous_headings":"","what":"version 0.8-3","title":"version 0.8-3","text":"CRAN release: 2023-08-10 Remove tolerance comparisons logical operators, restoring behavior changed previous release; #353 addressing #351","code":""},{"path":"/news/index.html","id":"version-08-2","dir":"Changelog","previous_headings":"","what":"version 0.8-2","title":"version 0.8-2","text":"CRAN release: 2023-04-27 Names preserved unit conversions; #305 @billdenney Identical units always divide (/) allow integer division (%/%). , inverse units always able multiply; #310 @billdenney Compare units via ud_compare(), fixing inconsistent results aliases symbols; #339, #346, #347 Fix units<-() treat empty unit NULL; #332 New .data.frame() method mixed_units; #309 Use short paths database loading Windows fix UTF-16 issues; #342 Add example docs reversing ggplot2 units scale; #343 Force storage mode double; #344 addressing #324 Fix units transformed axis; #323 Consider unitless radians trigonometric functions; #328","code":""},{"path":"/news/index.html","id":"version-08-1","dir":"Changelog","previous_headings":"","what":"version 0.8-1","title":"version 0.8-1","text":"CRAN release: 2022-12-10 fix %/% %% arguments different units; #313 fix multiplier parsing exp(log(x)) operations; #321 fix specification secondary axes scale_units; #326","code":""},{"path":"/news/index.html","id":"version-08-0","dir":"Changelog","previous_headings":"","what":"version 0.8-0","title":"version 0.8-0","text":"CRAN release: 2022-02-04 enhance unit mapping newly installed units; #290 remove deprecations: install_symbolic_unit, remove_symbolic_unit, install_conversion_constant, install_conversion_offset; #290 fix multipliers round trip log-exp operations; #292 integrate ggplot2 scales (previously ggforce package) automatically print axes units; #294 addressing #164 fix .equal.units non-units current fix zero power; #285 fix unique.units support arrays matrices, implement methods duplicated anyDuplicated fix plot labels spaces; #298 addressing #297 always add units labels, including user-provided ones; part #298 new symbols/names percentage character allowed due upstream bug; #289","code":""},{"path":"/news/index.html","id":"version-07-2","dir":"Changelog","previous_headings":"","what":"version 0.7-2","title":"version 0.7-2","text":"CRAN release: 2021-06-08 enhance pillar integration; #273, #275, #280 @krlmlr new unique method units mixed_units objects; #283 addressing #277 @lewinfox","code":""},{"path":"/news/index.html","id":"version-07-1","dir":"Changelog","previous_headings":"","what":"version 0.7-1","title":"version 0.7-1","text":"CRAN release: 2021-03-16 allow longer units grouping; #270 addressing #269 @bart1 fix regression set_units method mixed_units ensure ordering preserved; #272 addressing #271","code":""},{"path":"/news/index.html","id":"version-07-0","dir":"Changelog","previous_headings":"","what":"version 0.7-0","title":"version 0.7-0","text":"CRAN release: 2021-02-25 add load_units_xml enable database reloading well loading user-provided unit systems; #254 addressing #243, #244 add install_unit remove_unit adding/removing custom user-defined symbols names, optional mapping existing units; install_symbolic_unit, remove_symbolic_unit, install_conversion_constant, install_conversion_offset deprecated; #261 addressing #89 add keep_units, helper apply functions preserve units; #255 addressing #252 fix as_units(\"\"), now equivalent unitless; #199 fix plot axes plot.formula plot.data.frame; #213 fix arithmetic powers 1 -1; #264 improve arithmetic logarithms; #249 export ud_are_convertible; #263 addressing #258 @cregouby remove deprecations: .units, as_cf, make_unit, parse_unit; #259 remove deprecated pre-computed ud_units database; #259","code":""},{"path":"/news/index.html","id":"version-06-7","dir":"Changelog","previous_headings":"","what":"version 0.6-7","title":"version 0.6-7","text":"CRAN release: 2020-06-13 port isFALSE fix regression old R versions; #230 addressing #229 fix replacement operation units objects; #233 addressing #232 fix compatibility dplyr 1.0; #247 addressing #239","code":""},{"path":"/news/index.html","id":"version-06-6","dir":"Changelog","previous_headings":"","what":"version 0.6-6","title":"version 0.6-6","text":"CRAN release: 2020-03-16 prettier str print units mixed units; #228 addressing #227 add compatibility upcoming tibble v3.0.0; #225","code":""},{"path":"/news/index.html","id":"version-06-5","dir":"Changelog","previous_headings":"","what":"version 0.6-5","title":"version 0.6-5","text":"CRAN release: 2019-10-08 skip test CRAN avoid issues strict latin1 environments","code":""},{"path":"/news/index.html","id":"version-06-4","dir":"Changelog","previous_headings":"","what":"version 0.6-4","title":"version 0.6-4","text":"CRAN release: 2019-08-22 fix support weights units weighted.mean; #205 invalid names new units now trigger proper error message; #209 addressing #208 fix issues strict latin1 environments; #202","code":""},{"path":"/news/index.html","id":"version-06-3","dir":"Changelog","previous_headings":"","what":"version 0.6-3","title":"version 0.6-3","text":"CRAN release: 2019-05-03 improve platform dependent encodings handling; #183 don’t force .numeric unnecessary; #182 addressing #181 fix valgrind issues CRAN tidy tests; #193 addressing #192 new method drop_units data frames; #191 addressing #187","code":""},{"path":"/news/index.html","id":"version-06-2","dir":"Changelog","previous_headings":"","what":"version 0.6-2","title":"version 0.6-2","text":"CRAN release: 2018-12-05 fix support logarithms decibels; #177 addressing #176 add delayed S3 registration mechanism R >= 3.6.0","code":""},{"path":"/news/index.html","id":"version-06-1","dir":"Changelog","previous_headings":"","what":"version 0.6-1","title":"version 0.6-1","text":"CRAN release: 2018-09-21 vectors mixed units now supported; #145 NA values units now trigger proper error message; #163","code":""},{"path":"/news/index.html","id":"version-06-0","dir":"Changelog","previous_headings":"","what":"version 0.6-0","title":"version 0.6-0","text":"CRAN release: 2018-06-09 print units [unit] consistently, e.g. single unit data.frames; #132 improve printing unitless units; provide option print something else 1; #150 fix printing unitless labels negative_power TRUE; #133 install_symbolic_unit now adds dimensionless unit, integrated units system, meaning prefixes work well; #71 install_conversion_constant install_conversion_offset now install new unit function existing udunits unit.; #71, #84 unit simplification can now user-controlled units_options; #89 set_units(15, mg/kg) now longer simplified 1e-9 unitless; #89 directly uses udunits2 C library; drop dependence R package udunits2, fixing R package udunits2 memory leaks; #135 drops %*%, longer gives warning loading","code":""},{"path":"/news/index.html","id":"version-05-1","dir":"Changelog","previous_headings":"","what":"version 0.5-1","title":"version 0.5-1","text":"CRAN release: 2018-01-08","code":""},{"path":"/news/index.html","id":"version-05-0","dir":"Changelog","previous_headings":"","what":"version 0.5-0","title":"version 0.5-0","text":"CRAN release: 2018-01-07 deal trigonometric functions units degree; return units rad inverse trigonometric functions. Unit creation significantly refactored. units<- now accepts strings quoted language objects right hand side, powered new S3 methods as_units. valid unit symbols unit names recognized package ‘udunits2’ now accepted. New user facing function make_units() (plural s) also provided. See ?as_units details. @t-kalinowski new functions valid_udunits() valid_udunits_prefixes() generate tidy dataframes listing valid unit names, symbols, prefixes recognized udunits. @t-kalinowski new function install_symbolic_unit() adding custom, user-defined units. @t-kalinowski make_unit parse_unit (singular unit) deprecated, please use as_units instead. ud_units longer necessary soft-deprecated, may removed future release. add %*% S3 generic; #54 add %% %/% Ops.units support unary + - ; #56 add seq method units, converting units first argument Deprecate .dt as_difftime, .units as_units as_cf deparse_unit","code":""},{"path":"/news/index.html","id":"version-04-6","dir":"Changelog","previous_headings":"","what":"version 0.4-6","title":"version 0.4-6","text":"CRAN release: 2017-08-27 add .equal method units; #51 add deparse_unit replace as_cf add calender/time conversions udunits time units like minutes 1900-0-0, R’s POSIXct Date add as_units replace .units rename .dt as_difftime","code":""},{"path":"/news/index.html","id":"version-04-5","dir":"Changelog","previous_headings":"","what":"version 0.4-5","title":"version 0.4-5","text":"CRAN release: 2017-06-14 add support user-defined unit conversion; #31 allow 1/n integer powers, set_units(1:10, m^-2) ^ 0.5; #29 properly set log units log transform; #33 sin, cos tan longer complain units rad, return unitless; #40 now allow set_units(1:3, \"°C\") also set_units(1:3, \"degree_Celsius\") resolving names symbols first; #43 set_units(x) x numeric sets units unitless; #41","code":""},{"path":"/news/index.html","id":"version-04-4","dir":"Changelog","previous_headings":"","what":"version 0.4-4","title":"version 0.4-4","text":"CRAN release: 2017-04-20 fix result units bug multiplying dividing units vectors different length, #34 add rep method units vectors","code":""},{"path":"/news/index.html","id":"version-04-3","dir":"Changelog","previous_headings":"","what":"version 0.4-3","title":"version 0.4-3","text":"CRAN release: 2017-03-25 support set_units(1:10, m) require declare define, m (m resolved automatically ud_units)","code":""}]
